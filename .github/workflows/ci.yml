name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      jar-name: ${{ steps.build.outputs.jar-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run tests
        run: gradle test

      - name: Build application
        id: build
        run: |
          gradle build -x test
          JAR_NAME=$(ls build/libs/*.jar | head -1 | xargs basename)
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/
          retention-days: 1

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs/

      - name: Calculate version and changelog
        id: version
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          # Semantic versioning
          LATEST_TAG=$(git tag -l | sort -V | tail -1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="0.0.1"
            CHANGELOG=$(git log --pretty=format:"- %s")
          else
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
            if echo "$COMMITS" | grep -qE "^feat.*!:|^BREAKING CHANGE:"; then
              NEW_VERSION="$((MAJOR + 1)).0.0"
            elif echo "$COMMITS" | grep -qE "^feat:"; then
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            else
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            fi
            
            CHANGELOG=$(git log --pretty=format:"- %s" $LATEST_TAG..HEAD)
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version and create tag
        run: |
          sed -i 's/val appVersion = ".*"/val appVersion = "${{ steps.version.outputs.version }}"/' build.gradle.kts
          
          if ! git diff --quiet build.gradle.kts; then
            git add build.gradle.kts
            git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          fi
          
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## ðŸš€ Release v${{ steps.version.outputs.version }}
            
            ### ðŸ“‹ Changes:
            ${{ steps.version.outputs.changelog }}
          files: build/libs/*.jar
          draft: false
          prerelease: false