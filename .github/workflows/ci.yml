name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run unit tests
        run: gradle test

      - name: Build application
        run: gradle build -x test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Calculate next version
        id: semver
        run: |

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "üè∑Ô∏è No existing tags found, starting from v0.0.0"
            MAJOR=0
            MINOR=0
            PATCH=1

            COMMITS_SINCE_TAG=$(git log --pretty=%B)
          else
            echo "üè∑Ô∏è Latest tag found: $LATEST_TAG"
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
  
            COMMITS_SINCE_TAG=$(git log $LATEST_TAG..HEAD --pretty=%B)
          fi
          
          if echo "$COMMITS_SINCE_TAG" | grep -qE "^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            echo "üìà Major version bump detected"
          
          elif echo "$COMMITS_SINCE_TAG" | grep -qE "^feat(\(.+\))?:|^feature(\(.+\))?:"; then
            MINOR=$((MINOR + 1))
            PATCH=0
            echo "üöÄ Minor version bump detected"
          
          else
            PATCH=$((PATCH + 1))
            echo "üîß Patch version bump detected"
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "üì¶ New version calculated: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in build.gradle.kts
        run: |
          sed -i 's/val appVersion = ".*"/val appVersion = "${{ steps.semver.outputs.version }}"/' build.gradle.kts
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add build.gradle.kts
          git commit -m "chore: bump version to ${{ steps.semver.outputs.version }}" || true

      - name: Build release artifact
        run: gradle build

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.semver.outputs.version }}" -m "Release version ${{ steps.semver.outputs.version }}"
          git push origin "v${{ steps.semver.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.semver.outputs.version }}
          name: Release v${{ steps.semver.outputs.version }}
          body: |
            ## üöÄ Release v${{ steps.semver.outputs.version }}
            
            ### üìã Changes:
            ${{ steps.changelog.outputs.changes }}
          files: build/libs/*.jar
          draft: false
          prerelease: false

      - name: Generate changelog
        id: changelog
        run: |
          # Busca a tag anterior (se existir)
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null)
          
          if [ -n "$PREV_TAG" ]; then
            echo "üìã Generating changelog since $PREV_TAG"
            CHANGES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          else
            echo "üìã Generating changelog for all commits (first release)"
            CHANGES=$(git log --pretty=format:"- %s" --max-count=10)
          fi
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT